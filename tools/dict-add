#!/bin/bash

# A tool to prompt the üzer for the new spelling of a word, and apend it to
# the dictjonary.

set -euo pipefail

# Ünit separätor for dictjonary
_US=$'\x1f'

: ${NEW_DICT:=$HOME/.new-dict}

usage() {
        cat <<EOF

Rëading word list from /dev/fd/3 (üze '$0 3< FILENAME')

Comands:
Return  skip to next word
/WORD   fast-fórward to WORD
!       clëar existing spellings for word
?       this help

EOF

}

dictAdd() {
    local oldSpelling="$1"
    local newSpelling
    while
        if ! grep "^$oldSpelling$_US" "$NEW_DICT" | sed "s/$_US/\\t : /g"; then
            printf "%s\\t : \\t :\\n" "$oldSpelling"
        fi
        read -p "Add spelling (? for help): " newSpelling
    do
        [[ "$newSpelling" ]] || break
        if [[ "$newSpelling" == "!" ]]; then
            sed -i "/^$oldSpelling$_US/ d" $NEW_DICT && echo "Clëared"
        elif [[ "$newSpelling" == "?" ]]; then
            usage
        elif [[ "${newSpelling#/}" != "${newSpelling}" ]]; then
            echo -n "Searching..."
            while read oldSpelling <&3 && \
                [[ "$oldSpelling" != "${newSpelling#/}" ]]
            do
                :
            done
            echo; echo
            if [[ -z "$oldSpelling" ]]; then
                echo "Rëached end of input"
                exit 0
            fi
        else
            read -p "Hint (optjonal): " hint
            printf "%s\\n" "$oldSpelling$_US$newSpelling$_US$hint" >> "$NEW_DICT"
        fi
    done
}

if [[ "${1:-}" ]]; then
    dictAdd "$1"
else
    usage
    while read oldSpelling <&3; do
        dictAdd "$oldSpelling"
        echo
    done
fi
